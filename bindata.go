package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_base_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x4d\x6f\xdb\x3c\x0c\x3e\xe7\x05\xde\xff\xc0\xe9\x58\xcc\xf1\x75\x07\xa7\xc0\xb0\x16\x03\x06\x6c\x2d\x96\x5e\x76\x94\x25\xba\x56\x22\x4b\x9e\x44\x27\x33\xbc\xfc\xf7\xd1\x1f\xb1\x1d\xa0\x3b\xcd\x17\x53\x14\xf9\xf0\xe3\xa1\xd8\x75\x1a\x0b\xe3\x10\x44\x2e\x23\x8a\xcb\xe5\xff\xff\xb2\x77\x0f\x4f\x9f\x5e\x7e\x3c\x3f\x42\x49\x95\xbd\x67\xc5\xf4\x07\xc8\x4a\x94\x7a\x90\x58\xae\x90\x24\xa8\x52\x86\x88\xb4\x13\x0d\x15\xc9\x07\x71\x73\xe7\x64\x85\x3b\x21\x1b\x2a\x7d\x10\xa0\xbc\x23\x74\x6c\xf9\xcd\xa8\x23\x3c\xfb\x33\x5a\x7b\xb5\xef\x3a\xc2\xaa\xb6\x92\x38\x8f\xde\x55\xc0\xb6\xcf\x64\x80\x22\x43\x16\xef\xf7\x0f\x8f\xb0\x47\x19\x54\x09\xbf\x6f\xcc\x87\xeb\xc1\x3e\x4b\x47\xd3\xc9\xcf\x1a\x77\x84\x80\x76\x27\x22\xb5\x16\x63\x89\x48\x02\xa8\xad\x39\x27\xc2\x5f\x94\xaa\x18\x05\x94\x01\x8b\x9d\x48\xeb\x26\xb7\x46\xf5\xaa\xb4\x31\x47\x43\x5b\x69\x2b\x1f\x29\x29\x38\xc8\xb6\x32\x6e\xdb\x1b\xff\x2b\x72\xd4\x98\xc4\xa1\x86\x1b\xb8\xa8\x82\xa9\x69\xed\x7f\x90\x27\x39\x6a\x05\xc4\xa0\x16\x94\x43\x4c\x0f\x3f\x1b\x0c\xed\x90\xd3\x81\x31\xb2\x74\x34\x1c\xe9\x49\x67\x7e\xb2\xdc\xeb\x76\x90\x36\x99\x36\x27\x50\x56\xc6\xc8\x2c\x1d\x13\x27\x4f\xb9\x0c\x63\xf4\xcd\xdb\x97\x49\x1e\xa4\xd3\xc0\xe7\xd2\x68\x8d\x2e\x89\x95\xec\xc9\xca\xe4\xb5\x2a\xb1\x22\x24\x4b\x25\xa7\xc1\x38\x53\x41\x1c\xfc\x4d\xd0\x69\x00\x60\xd1\x14\xd6\xd4\x62\xf6\xea\x3a\x53\xc0\xf6\x01\x4f\x68\xaf\xe4\x0f\x60\x73\x50\x8d\xa7\x94\xdb\xee\xa5\x16\xf7\xdf\x87\x3f\x5c\xe7\x20\xf6\x49\x00\x2c\x5e\x5d\x97\xde\xc1\x57\x79\x44\x68\x22\xc2\x97\x3d\x90\x87\xcf\x8f\x2f\x60\x22\x27\xc1\x8e\xbe\x80\x93\xc1\xb3\x71\xaf\x40\x25\x42\x2d\x5f\x11\xce\x86\xca\xfe\x64\x02\xe4\xc1\x9f\x23\x86\x05\x6f\xf8\x3e\x5a\xc2\xe0\x24\x19\x4e\xb1\x7d\x3f\x20\x4b\x1e\x04\x6d\x02\x2a\xea\x23\xd4\x0d\xf5\x00\x15\x48\x5a\x60\x59\x68\x41\xf1\x5b\x80\x22\xf8\x6a\xbb\x60\xde\xa5\x37\x75\xde\xb4\xb0\xeb\xd0\xe9\xf1\xfa\x6f\x24\xad\xfa\xb9\xa6\xe9\xcd\xfe\x6e\x18\xa4\xf0\xa1\x5a\xa1\x0c\x47\xfe\x57\x32\xbc\x1a\x97\x04\xac\xfc\x09\x7b\x85\x36\x91\x7b\xda\x26\xc6\xf1\xa0\x63\x92\x5b\xaf\x8e\x02\xa4\x22\xe3\x1d\xb3\x30\x4e\xb0\x00\x7e\xa7\xa5\xd7\x3b\xf1\xfc\xb4\x7f\x99\x83\x6c\x32\xe3\xfa\x26\x8c\x4f\xff\x6a\x7a\x1b\x34\x39\x1b\x4d\xe5\x34\x53\xc0\xa1\x14\x96\xde\x6a\x0c\xb3\xc3\x82\x96\x37\x44\xde\xad\x00\x26\xc5\x2c\x25\x75\x30\x5c\x41\xcb\x03\xd9\xe4\x95\xa1\x2c\x1d\xf5\x73\xd5\x69\x1f\xf2\x3a\xec\x73\x8b\xd7\xe2\x7a\x9b\x4c\x3d\x9d\xf7\x0f\xc3\x8d\xef\x88\x9f\xd6\xb8\x04\x67\x62\x7a\xf1\xba\x3b\x87\x9d\x75\xb9\x4c\x77\x7f\x02\x00\x00\xff\xff\xb4\xe7\x99\x94\x54\x05\x00\x00")

func templates_base_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_base_tmpl,
		"templates/base.tmpl",
	)
}

func templates_base_tmpl() (*asset, error) {
	bytes, err := templates_base_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/base.tmpl", size: 1364, mode: os.FileMode(438), modTime: time.Unix(1434393717, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_index_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4a\x2c\x4e\x55\x52\xd0\xab\xad\xe5\xe5\xaa\xae\x4e\x49\x4d\xcb\xcc\x03\x0a\x96\x64\x96\xe4\xa4\x2a\xd5\xd6\x7a\xe6\xa5\xa4\x56\x54\x57\xa7\xe6\xa5\xa0\xca\x27\xe7\xe7\x95\xa4\xe6\x95\x28\x81\x44\x39\x3d\x52\x73\x72\xf2\x15\x40\xd2\x60\x75\x80\x00\x00\x00\xff\xff\x77\x11\x7c\xb6\x5d\x00\x00\x00")

func templates_index_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_index_tmpl,
		"templates/index.tmpl",
	)
}

func templates_index_tmpl() (*asset, error) {
	bytes, err := templates_index_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/index.tmpl", size: 93, mode: os.FileMode(438), modTime: time.Unix(1434264964, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_info_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xc1\x4a\x03\x31\x10\x86\xcf\x0a\xbe\xc3\x10\x3c\xb7\x78\x5f\x7a\x51\x0f\x5e\xec\xc1\xe2\x3d\x6e\x26\xec\x40\x9a\x84\x64\x2a\x94\x61\xde\xdd\xa4\x5b\x97\x15\xa4\xb7\xe1\x9f\xef\xfb\x13\x46\x84\xf1\x98\x83\x65\x04\xf3\x65\x2b\x1a\xd8\xa8\x3e\xdc\x8b\x38\xf4\x14\x5b\xc8\xc4\x01\x8d\xea\xc7\xcb\x2b\xbc\x45\x9f\x44\x30\xba\xbf\xc8\x98\x22\x63\x64\xd3\xd3\xbb\x61\x7a\xda\x75\x96\x1a\x5b\x8e\x96\x29\xc5\x61\xdb\xb2\xbe\xca\xbb\xc3\x84\x30\x9e\x4a\x69\x78\x38\x43\x48\xd6\xa1\x83\x8e\x4f\xb6\x82\xc8\xe3\xa6\xcd\xcf\xe9\x14\x59\x15\xf8\x9c\xb1\x0e\xdb\xbc\x52\xbf\xb1\xd4\x56\x08\xb4\xc0\x9f\x73\xa2\x7a\x05\x45\xc8\xc3\x65\xb3\xf7\x9e\x46\x1b\xe6\x4f\xcd\xfa\xf5\xbd\x55\x4b\xea\x10\xd9\xb0\xd8\x18\x2a\xde\x56\xde\xf7\x87\x7f\xb4\xdf\x9b\x5c\x86\x9f\x00\x00\x00\xff\xff\x63\xeb\x8e\x48\x55\x01\x00\x00")

func templates_info_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_info_tmpl,
		"templates/info.tmpl",
	)
}

func templates_info_tmpl() (*asset, error) {
	bytes, err := templates_info_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/info.tmpl", size: 341, mode: os.FileMode(438), modTime: time.Unix(1434403816, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_search_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x51\xc1\x6a\x03\x21\x10\x3d\x27\x90\x7f\x18\x3c\x06\x12\xe9\xb5\x18\x4f\x85\x52\x28\x39\xb4\xfd\x01\xb3\x4e\xba\x4b\xcc\xba\xa8\x1b\x08\xe2\xbf\x77\x66\xdd\x90\xed\xc9\xf7\xde\x3c\xdf\xe8\x4c\xce\x09\xaf\x83\x33\x09\x41\x9c\x4c\x44\x01\xfb\x52\x36\xeb\x9c\x2d\x9e\xbb\x9e\xc4\xd4\x25\x87\xa2\x94\x6f\x34\xa1\x69\xe1\x0b\xe3\xe8\x52\xcc\x19\x7b\xfb\xdf\xd8\xf8\x3e\x61\x9f\x04\xab\xca\x76\x37\x68\x9c\x89\xf1\x20\xc6\xcb\x8e\x4b\x86\x4c\x01\x96\x64\xd7\x90\x1d\x83\xd0\x9b\xf5\x4a\xb5\x2f\x7a\x8e\x7e\x55\x92\x08\x6b\xc9\x9c\x1c\x2e\x62\x2a\x7f\x80\x5d\xeb\x6f\x35\xb1\xd2\x98\x42\x37\xa0\x9d\xe2\x72\x96\x5b\xf8\xf4\xfe\x12\xe1\x3c\xf6\x97\x3b\x98\x08\x2d\x3a\x07\xce\x3b\xd8\x4a\x7e\x22\xc5\xb7\x68\x2c\xbb\x19\xea\xa3\xb9\xa2\x92\x04\x1e\xc2\xcf\x7d\xc0\x8f\xb7\x87\xc4\xe7\x6c\x57\xe9\xe4\xed\x7d\xf2\xe5\x1c\x4c\xff\x8b\xb0\x67\x73\x9c\x62\xf9\x72\x98\x8a\x8c\xac\x56\x06\xda\x80\xe7\x83\x90\x89\x3c\x32\xe7\x7d\x0d\x2e\x45\x68\x22\xef\x98\xb8\x73\x29\x4a\x1a\x4d\x4d\xec\xe2\xea\xc2\xfb\xac\x10\x0a\x73\x6f\x74\x11\xeb\x57\xe4\xf3\x49\x84\x79\x1c\x15\x0f\xfa\xe8\x21\xd6\xcd\x85\x3a\x5e\x3a\xd3\x18\x7a\xb4\x4a\x0e\x75\x54\xf3\x26\x95\xa4\xa5\xe9\x15\xaf\x74\x52\xfe\x02\x00\x00\xff\xff\x02\x84\x97\xfb\x1a\x02\x00\x00")

func templates_search_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_search_tmpl,
		"templates/search.tmpl",
	)
}

func templates_search_tmpl() (*asset, error) {
	bytes, err := templates_search_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/search.tmpl", size: 538, mode: os.FileMode(438), modTime: time.Unix(1434266155, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_type_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\x3d\x6b\xf3\x30\x10\x9e\xf3\xc2\xfb\x1f\x84\xc8\xd8\x24\x84\x92\x25\x28\x86\x42\xa0\x64\xe9\x54\xba\xcb\xd6\xb5\x11\x56\x64\x23\x5f\x02\x41\xf8\xbf\xf7\x64\xcb\xb1\x9c\xb6\x5b\xe9\x76\xf7\x7c\x9c\x9e\x93\xe4\x3d\xc2\xa9\x36\x12\x81\xf1\x5c\x36\xc0\xd9\xb2\x6d\xff\xff\xf3\x5e\xc1\xbb\xb6\x04\xa2\x46\x03\xbc\x6d\x99\xf7\xcb\xd7\x6b\x0d\xcb\x67\xc0\x17\x79\x82\x0e\x01\xab\xa6\xea\xa2\xb2\x08\x16\x79\x40\x67\x42\xe9\x0b\x2b\x8c\x6c\x9a\x1d\x3f\x97\x8b\xdc\x54\x45\xc9\x33\x22\xee\x99\xe0\x92\xe4\x77\x2c\x6d\x16\x05\x4d\x02\xd7\x3b\x66\xe2\xb8\xce\xc2\xb9\xdb\xaf\x41\xc4\xea\xf8\x38\x88\x36\x59\xe0\xa6\xc2\x01\xe9\x94\x9b\xa9\xf2\xb0\x9f\xea\x0e\xfb\x44\x25\x56\x94\x33\x54\x63\xf1\xdb\x2b\xed\xa1\x29\x9c\xae\x51\x57\x76\x9b\xec\x51\x67\xc9\x96\x4f\x88\x4e\xe7\xe7\xf0\x44\xa7\x44\xcf\x43\xd2\xfa\xaf\x82\xde\x42\x34\x14\x73\x1d\x71\x94\xb9\x81\x64\x58\xd7\x47\x13\xb1\x47\x90\x2a\x36\xa1\x1b\x67\xb0\xf0\x1c\x62\x85\x3f\xb0\x6f\xd2\x9c\x53\x9a\xca\x64\x94\xc0\xbc\x52\xd7\xd8\x78\xef\xa4\xfd\x00\x36\x2f\x1f\xd8\xfc\xc2\xb6\x3b\xd6\x5f\xdb\x18\xb7\xfb\x8a\xbd\xcf\x0d\xc7\x51\xad\xe8\x86\xe7\x65\xb8\xc2\x31\xc5\x00\x5f\xa6\x30\xd5\xee\x76\x5c\xfc\xf2\xf7\x41\x48\x13\x76\xff\xfe\x35\xa2\xeb\x33\x00\x00\xff\xff\xfe\xd5\xe6\x9c\x6c\x03\x00\x00")

func templates_type_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_type_tmpl,
		"templates/type.tmpl",
	)
}

func templates_type_tmpl() (*asset, error) {
	bytes, err := templates_type_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/type.tmpl", size: 876, mode: os.FileMode(438), modTime: time.Unix(1434393589, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tmpl": templates_base_tmpl,
	"templates/index.tmpl": templates_index_tmpl,
	"templates/info.tmpl": templates_info_tmpl,
	"templates/search.tmpl": templates_search_tmpl,
	"templates/type.tmpl": templates_type_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"base.tmpl": &_bintree_t{templates_base_tmpl, map[string]*_bintree_t{
		}},
		"index.tmpl": &_bintree_t{templates_index_tmpl, map[string]*_bintree_t{
		}},
		"info.tmpl": &_bintree_t{templates_info_tmpl, map[string]*_bintree_t{
		}},
		"search.tmpl": &_bintree_t{templates_search_tmpl, map[string]*_bintree_t{
		}},
		"type.tmpl": &_bintree_t{templates_type_tmpl, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

